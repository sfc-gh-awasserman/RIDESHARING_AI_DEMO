-- Snowflake Intelligence Demo: Ridesharing Company
-- Step 3: Create Semantic Views for Snowflake Intelligence

USE DATABASE RIDESHARE_DEMO;
USE SCHEMA RIDESHARE_DATA;

-- Create comprehensive semantic view for analytics
CREATE OR REPLACE VIEW RIDESHARE_ANALYTICS_VIEW AS
SELECT 
    -- Client Information
    c.CLIENT_ID,
    c.CLIENT_NAME,
    c.CLIENT_TYPE,
    c.STATE AS CLIENT_STATE,
    c.CITY AS CLIENT_CITY,
    c.SIGN_UP_DATE AS CLIENT_SIGN_UP_DATE,
    c.STATUS AS CLIENT_STATUS,
    c.MONTHLY_BUDGET,
    
    -- Ride Information
    r.RIDE_ID,
    r.RIDE_DATE,
    r.RIDE_TIME,
    r.STUDENT_TYPE,
    r.RIDE_COST,
    r.RIDE_STATUS,
    r.CANCELLATION_REASON,
    r.REQUEST_TIMESTAMP,
    r.CONFIRMATION_TIMESTAMP,
    r.WAIT_TIME_MINUTES,
    r.PICKUP_LAT,
    r.PICKUP_LON,
    r.DROPOFF_LAT,
    r.DROPOFF_LON,
    
    -- CareDriver Information
    d.DRIVER_ID,
    d.DRIVER_NAME,
    d.STATE AS DRIVER_STATE,
    d.CITY AS DRIVER_CITY,
    d.SIGN_UP_DATE AS DRIVER_SIGN_UP_DATE,
    d.CERTIFICATION_COMPLETE_DATE,
    d.CERTIFICATION_DAYS,
    d.STATUS AS DRIVER_STATUS,
    d.MARKETING_SOURCE AS DRIVER_MARKETING_SOURCE,
    
    -- Time-based calculations
    YEAR(r.RIDE_DATE) AS RIDE_YEAR,
    QUARTER(r.RIDE_DATE) AS RIDE_QUARTER,
    MONTH(r.RIDE_DATE) AS RIDE_MONTH,
    MONTHNAME(r.RIDE_DATE) AS RIDE_MONTH_NAME,
    DATE_TRUNC('MONTH', r.RIDE_DATE) AS RIDE_MONTH_START,
    DATE_TRUNC('QUARTER', r.RIDE_DATE) AS RIDE_QUARTER_START,
    DAYOFWEEK(r.RIDE_DATE) AS RIDE_DAY_OF_WEEK,
    HOUR(r.RIDE_TIME) AS RIDE_HOUR,
    
    -- Categorizations
    CASE 
        WHEN HOUR(r.RIDE_TIME) BETWEEN 6 AND 9 THEN 'Morning Rush'
        WHEN HOUR(r.RIDE_TIME) BETWEEN 14 AND 17 THEN 'Afternoon Rush'
        ELSE 'Off-Peak'
    END AS RIDE_TIME_CATEGORY,
    
    CASE 
        WHEN r.WAIT_TIME_MINUTES <= 10 THEN 'Fast (<=10 min)'
        WHEN r.WAIT_TIME_MINUTES <= 20 THEN 'Moderate (10-20 min)'
        WHEN r.WAIT_TIME_MINUTES <= 30 THEN 'Slow (20-30 min)'
        ELSE 'Very Slow (>30 min)'
    END AS WAIT_TIME_CATEGORY,
    
    -- Fiscal period calculations (assuming fiscal year starts in July)
    CASE 
        WHEN MONTH(r.RIDE_DATE) >= 7 THEN YEAR(r.RIDE_DATE)
        ELSE YEAR(r.RIDE_DATE) - 1
    END AS FISCAL_YEAR,
    
    -- Client tenure
    DATEDIFF(month, c.SIGN_UP_DATE, CURRENT_DATE()) AS CLIENT_TENURE_MONTHS,
    
    -- Driver metrics
    DATEDIFF(day, d.SIGN_UP_DATE, CURRENT_DATE()) AS DRIVER_TENURE_DAYS

FROM RIDES r
LEFT JOIN CLIENTS c ON r.CLIENT_ID = c.CLIENT_ID
LEFT JOIN CARE_DRIVERS d ON r.DRIVER_ID = d.DRIVER_ID;

-- Create feedback analytics view
CREATE OR REPLACE VIEW FEEDBACK_ANALYTICS_VIEW AS
SELECT 
    f.FEEDBACK_ID,
    f.RIDE_ID,
    f.FEEDBACK_DATE,
    f.RATING,
    f.COMMENTS,
    f.SENTIMENT,
    
    -- Client Information
    c.CLIENT_ID,
    c.CLIENT_NAME,
    c.CLIENT_TYPE,
    c.STATE AS CLIENT_STATE,
    c.CITY AS CLIENT_CITY,
    
    -- Driver Information
    d.DRIVER_ID,
    d.DRIVER_NAME,
    d.STATE AS DRIVER_STATE,
    d.CITY AS DRIVER_CITY,
    
    -- Time periods
    YEAR(f.FEEDBACK_DATE) AS FEEDBACK_YEAR,
    MONTH(f.FEEDBACK_DATE) AS FEEDBACK_MONTH,
    MONTHNAME(f.FEEDBACK_DATE) AS FEEDBACK_MONTH_NAME,
    DATE_TRUNC('MONTH', f.FEEDBACK_DATE) AS FEEDBACK_MONTH_START,
    
    -- Rating categorization
    CASE 
        WHEN f.RATING >= 4.5 THEN 'Excellent'
        WHEN f.RATING >= 3.5 THEN 'Good'
        WHEN f.RATING >= 2.5 THEN 'Fair'
        ELSE 'Poor'
    END AS RATING_CATEGORY

FROM RIDER_FEEDBACK f
LEFT JOIN CLIENTS c ON f.CLIENT_ID = c.CLIENT_ID
LEFT JOIN CARE_DRIVERS d ON f.DRIVER_ID = d.DRIVER_ID;

-- Create marketing analytics view
CREATE OR REPLACE VIEW MARKETING_ANALYTICS_VIEW AS
SELECT 
    mc.CAMPAIGN_ID,
    mc.CAMPAIGN_NAME,
    mc.CAMPAIGN_TYPE,
    mc.CHANNEL,
    mc.START_DATE AS CAMPAIGN_START_DATE,
    mc.END_DATE AS CAMPAIGN_END_DATE,
    mc.AD_SPEND,
    mc.TARGET_AUDIENCE,
    
    cr.RESULT_ID,
    cr.METRIC_TYPE,
    cr.METRIC_VALUE,
    cr.RESULT_DATE,
    cr.GEOGRAPHIC_MARKET,
    
    -- Time periods
    YEAR(mc.START_DATE) AS CAMPAIGN_YEAR,
    QUARTER(mc.START_DATE) AS CAMPAIGN_QUARTER,
    MONTHNAME(mc.START_DATE) AS CAMPAIGN_START_MONTH,
    
    -- Duration
    DATEDIFF(day, mc.START_DATE, mc.END_DATE) AS CAMPAIGN_DURATION_DAYS,
    
    -- ROI Calculations
    CASE 
        WHEN cr.METRIC_TYPE = 'Revenue' AND mc.AD_SPEND > 0 
        THEN (cr.METRIC_VALUE / mc.AD_SPEND)
        ELSE NULL
    END AS ROAS

FROM MARKETING_CAMPAIGNS mc
LEFT JOIN CAMPAIGN_RESULTS cr ON mc.CAMPAIGN_ID = cr.CAMPAIGN_ID;

-- Create driver performance view
CREATE OR REPLACE VIEW DRIVER_PERFORMANCE_VIEW AS
SELECT 
    d.DRIVER_ID,
    d.DRIVER_NAME,
    d.STATE AS DRIVER_STATE,
    d.CITY AS DRIVER_CITY,
    d.SIGN_UP_DATE,
    d.CERTIFICATION_COMPLETE_DATE,
    d.CERTIFICATION_DAYS,
    d.STATUS AS DRIVER_STATUS,
    d.MARKETING_SOURCE,
    
    -- Ride metrics
    COUNT(DISTINCT r.RIDE_ID) AS TOTAL_RIDES,
    COUNT(DISTINCT CASE WHEN r.RIDE_STATUS = 'Completed' THEN r.RIDE_ID END) AS COMPLETED_RIDES,
    COUNT(DISTINCT CASE WHEN r.RIDE_STATUS = 'Cancelled' THEN r.RIDE_ID END) AS CANCELLED_RIDES,
    COUNT(DISTINCT CASE WHEN r.RIDE_STATUS = 'No-Show' THEN r.RIDE_ID END) AS NO_SHOW_RIDES,
    
    -- Revenue metrics
    SUM(CASE WHEN r.RIDE_STATUS = 'Completed' THEN r.RIDE_COST ELSE 0 END) AS TOTAL_REVENUE,
    AVG(CASE WHEN r.RIDE_STATUS = 'Completed' THEN r.RIDE_COST END) AS AVG_RIDE_COST,
    
    -- Performance metrics
    AVG(f.RATING) AS AVG_RATING,
    COUNT(DISTINCT f.FEEDBACK_ID) AS TOTAL_FEEDBACK,
    
    -- Time-based metrics (rides per week)
    CASE 
        WHEN DATEDIFF(week, d.CERTIFICATION_COMPLETE_DATE, CURRENT_DATE()) > 0 
        THEN COUNT(DISTINCT r.RIDE_ID) / DATEDIFF(week, d.CERTIFICATION_COMPLETE_DATE, CURRENT_DATE())
        ELSE 0
    END AS RIDES_PER_WEEK

FROM CARE_DRIVERS d
LEFT JOIN RIDES r ON d.DRIVER_ID = r.DRIVER_ID AND r.RIDE_DATE >= d.CERTIFICATION_COMPLETE_DATE
LEFT JOIN RIDER_FEEDBACK f ON d.DRIVER_ID = f.DRIVER_ID
GROUP BY 
    d.DRIVER_ID, d.DRIVER_NAME, d.STATE, d.CITY, d.SIGN_UP_DATE, 
    d.CERTIFICATION_COMPLETE_DATE, d.CERTIFICATION_DAYS, d.STATUS, d.MARKETING_SOURCE;

-- Create client performance view
CREATE OR REPLACE VIEW CLIENT_PERFORMANCE_VIEW AS
SELECT 
    c.CLIENT_ID,
    c.CLIENT_NAME,
    c.CLIENT_TYPE,
    c.STATE AS CLIENT_STATE,
    c.CITY AS CLIENT_CITY,
    c.SIGN_UP_DATE,
    c.STATUS AS CLIENT_STATUS,
    c.MONTHLY_BUDGET,
    
    -- Ride volume metrics
    COUNT(DISTINCT r.RIDE_ID) AS TOTAL_RIDES,
    COUNT(DISTINCT CASE WHEN r.RIDE_STATUS = 'Completed' THEN r.RIDE_ID END) AS COMPLETED_RIDES,
    
    -- Student type breakdown
    COUNT(DISTINCT CASE WHEN r.STUDENT_TYPE = 'Special Needs' THEN r.RIDE_ID END) AS SPECIAL_NEEDS_RIDES,
    COUNT(DISTINCT CASE WHEN r.STUDENT_TYPE = 'McKinney-Vento' THEN r.RIDE_ID END) AS MCKINNEY_VENTO_RIDES,
    COUNT(DISTINCT CASE WHEN r.STUDENT_TYPE = 'Foster Care' THEN r.RIDE_ID END) AS FOSTER_CARE_RIDES,
    COUNT(DISTINCT CASE WHEN r.STUDENT_TYPE = 'General' THEN r.RIDE_ID END) AS GENERAL_RIDES,
    
    -- Financial metrics
    SUM(CASE WHEN r.RIDE_STATUS = 'Completed' THEN r.RIDE_COST ELSE 0 END) AS TOTAL_SPEND,
    AVG(CASE WHEN r.RIDE_STATUS = 'Completed' THEN r.RIDE_COST END) AS AVG_RIDE_COST,
    SUM(CASE WHEN r.RIDE_STATUS = 'Completed' AND r.RIDE_DATE >= DATE_TRUNC('MONTH', CURRENT_DATE()) THEN r.RIDE_COST ELSE 0 END) AS CURRENT_MONTH_SPEND,
    
    -- Performance metrics
    ROUND(COUNT(DISTINCT CASE WHEN r.RIDE_STATUS = 'Completed' THEN r.RIDE_ID END) * 100.0 / 
          NULLIF(COUNT(DISTINCT r.RIDE_ID), 0), 2) AS COMPLETION_RATE,
    
    AVG(r.WAIT_TIME_MINUTES) AS AVG_WAIT_TIME_MINUTES,
    
    -- Time periods
    MIN(r.RIDE_DATE) AS FIRST_RIDE_DATE,
    MAX(r.RIDE_DATE) AS LAST_RIDE_DATE

FROM CLIENTS c
LEFT JOIN RIDES r ON c.CLIENT_ID = r.CLIENT_ID
GROUP BY 
    c.CLIENT_ID, c.CLIENT_NAME, c.CLIENT_TYPE, c.STATE, c.CITY, 
    c.SIGN_UP_DATE, c.STATUS, c.MONTHLY_BUDGET;

-- Create lead conversion view
CREATE OR REPLACE VIEW LEAD_CONVERSION_VIEW AS
SELECT 
    l.LEAD_ID,
    l.LEAD_NAME,
    l.LEAD_TYPE,
    l.STATE,
    l.CITY,
    l.LEAD_DATE,
    l.CONVERTED_TO_CLIENT,
    l.CONVERSION_DATE,
    l.MARKETING_SOURCE,
    
    -- Conversion metrics
    CASE WHEN l.CONVERTED_TO_CLIENT THEN 1 ELSE 0 END AS IS_CONVERTED,
    DATEDIFF(day, l.LEAD_DATE, l.CONVERSION_DATE) AS DAYS_TO_CONVERSION,
    
    -- Time periods
    YEAR(l.LEAD_DATE) AS LEAD_YEAR,
    QUARTER(l.LEAD_DATE) AS LEAD_QUARTER,
    MONTH(l.LEAD_DATE) AS LEAD_MONTH,
    MONTHNAME(l.LEAD_DATE) AS LEAD_MONTH_NAME

FROM MARKET_LEADS l;

-- Add comments to semantic views
COMMENT ON VIEW RIDESHARE_ANALYTICS_VIEW IS 'Comprehensive view combining ride, client, and driver data with time-based analysis fields for Snowflake Intelligence queries';
COMMENT ON VIEW FEEDBACK_ANALYTICS_VIEW IS 'View for analyzing rider feedback and sentiment with client and driver context';
COMMENT ON VIEW MARKETING_ANALYTICS_VIEW IS 'View for analyzing marketing campaign performance including ROAS calculations';
COMMENT ON VIEW DRIVER_PERFORMANCE_VIEW IS 'Aggregated view of driver performance metrics including ride counts, revenue, and ratings';
COMMENT ON VIEW CLIENT_PERFORMANCE_VIEW IS 'Aggregated view of client performance metrics including ride volumes, spend, and student types';
COMMENT ON VIEW LEAD_CONVERSION_VIEW IS 'View for analyzing lead conversion metrics by source and geography';

-- Grant appropriate permissions (adjust as needed for your environment)
-- GRANT SELECT ON VIEW RIDESHARE_ANALYTICS_VIEW TO ROLE ANALYST_ROLE;
-- GRANT SELECT ON VIEW FEEDBACK_ANALYTICS_VIEW TO ROLE ANALYST_ROLE;
-- GRANT SELECT ON VIEW MARKETING_ANALYTICS_VIEW TO ROLE MARKETING_ROLE;
-- GRANT SELECT ON VIEW DRIVER_PERFORMANCE_VIEW TO ROLE OPERATIONS_ROLE;
-- GRANT SELECT ON VIEW CLIENT_PERFORMANCE_VIEW TO ROLE SALES_ROLE;
-- GRANT SELECT ON VIEW LEAD_CONVERSION_VIEW TO ROLE MARKETING_ROLE;
